<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Jay Paul Morgan</title>
<link>https://morganwastaken.com/posts.html</link>
<atom:link href="https://morganwastaken.com/posts.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.6</generator>
<lastBuildDate>Tue, 07 May 2024 23:00:00 GMT</lastBuildDate>
<item>
  <title>How I utilise the word utilise</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2024-05-08-utilise/</link>
  <description><![CDATA[ 





<p>To put it simply: I don’t. I don’t like the word utilise. Instead, I /use/ the word use. It’s a great word, use, it’s very short—one syllable, and easily conveys the intention. While utilise can also convey the meaning, it’s wrapped up in this air of pretentiousness that just isn’t needed.</p>
<p>I don’t utilise the word utilise, I use the word use.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2024,
  author = {Morgan, Jay Paul},
  title = {How {I} Utilise the Word Utilise},
  date = {2024-05-08},
  url = {https://morganwastaken.com/blog/2024-05-08-utilise},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2024" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2024. <span>“How I Utilise the Word Utilise.”</span>
May 8, 2024. <a href="https://morganwastaken.com/blog/2024-05-08-utilise">https://morganwastaken.com/blog/2024-05-08-utilise</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2024-05-08-utilise/</guid>
  <pubDate>Tue, 07 May 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>On Scientific Ethics</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2024-04-21-scientific-ethics/</link>
  <description><![CDATA[ 





<p><em>“I am a scientist, and I solve problems. I don’t have to care about ethics!”</em></p>
<p>This statement concerns the ethics of scientists – scientific ethics. To understand whether the person making this statement is correct or not in their view, we must first understand the contents of the statement. Namely, the nature of ethics, and what it means to be a scientist.</p>
<p>To begin, let us look at ethics.</p>
<p>Ethics comes from the ancient Greek word, ethos, meaning character; personal disposition. Ethics by definition are the moral principles that guides the behaviour or conducting of an activity. But what are these principles? Immanuel Kant believed there were universal principles. He believed that our ethical framework is not situational-dependent and personal, such as making ourselves happy, but there were laws by which a rational actor behaves. Therefore to act ethically is to act rationally as expressed by following of the ethical principles.</p>
<p>Aristotle agrees with the relation of rationality and ethical standards. In his series of lectures, Nicomachean ethics, Aristotle explains the absurdity of letting barbarians massacre your family without any fight. Aristotle was a strong believer that there is a middle ground to all things and situations, and a person who acts rationally always strives to determine this middle ground. But, like in the situation of barbarians, the middle ground does not simply mean a neutrality and apathy and not doing anything potentially bad, but it means to the right thing at the right time. As agreed by Dante ‘There is a special place in hell for people who, in a time of a moral crisis, maintain their neutrality’. Sometimes we must act in order to act rationally and ethically given the circumstance and situation.</p>
<p>Let us now turn to the subject of the circumstance: being a scientist.</p>
<p>The Science Council defines a scientist as someone who systematically gathers and uses evidence, to make a hypothesis and test them, to gain and share understanding and knowledge. In this way, we may define the scientific ethical framework by the guiding principles:</p>
<ol type="1">
<li>Honesty in scientific reporting.</li>
<li>Unbiased analysis of results</li>
<li>Open sharing of methods, code, data.</li>
<li>Correct citation and refrain from plagiarism or stealing of ideas.</li>
<li>Moral obligations to society in general, and, in some disciplines, responsibility in weighing the rights of human and animal subjects.</li>
</ol>
<p>To be a scientist is to follow these guiding principles. To go against these principles is to not act ethically, and therefore not rational. Someone who does not care about ethics is acting with absurdity, and by definition not a scientist.</p>
<p>But our statement concerns someone who wishes to disregard ethics in pursuit of ‘solving problems’. This person is following the hedonistic view that their desires of solving problems overrides those of any moral principles and ethical concerns. This, in nature, in very unscientific as their interest is not in the scientific method, but in the result of having ‘solved a problem’.</p>
<p>Someone who claims to be a scientist to want to solve problems, must do so with accordance to the ethical principles therein. Acting ethically, is not a chain with which we bind ourselves, but a compass that guides us to do correct science. To solve problems we must find a hypothesis and method of testing it that follows our ethical principles of science. Solving problems does not require us to throw away our ethics—for that would not be science. To act against these ethical codes would not be scientific and therefore irrational. From this we may conclude that the statement presented paints a picture of someone who is living paradoxically with their desired character of scientist.</p>
<p>Finally, I would like to end my argument with a quote from Albert Einstein, who says ‘Most people say that it is the intellect which makes a great scientist. They are wrong: it is character.’ When we understand that in ancient Greek ‘character’ was ‘ethos’, we see this quote to be correct.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2024,
  author = {Morgan, Jay Paul},
  title = {On {Scientific} {Ethics}},
  date = {2024-04-21},
  url = {https://morganwastaken.com/posts/2024-04-21-scientific-ethics/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2024" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2024. <span>“On Scientific Ethics.”</span> April 21,
2024. <a href="https://morganwastaken.com/posts/2024-04-21-scientific-ethics/">https://morganwastaken.com/posts/2024-04-21-scientific-ethics/</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2024-04-21-scientific-ethics/</guid>
  <pubDate>Sat, 20 Apr 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Domain-informed graph neural networks: a quantum chemistry case study</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2023-06-27-GNN/</link>
  <description><![CDATA[ 





<p>I would like to bring to attention that our (Jay Paul Morgan, Adeline Paiement, and Christian Klinke) paper ‘Domain-informed graph neural networks: a quantum chemistry case study’ has been accepted for publication in the journal ‘Neural Networks’, while we are waiting for the article to become available, we may direct you to an archive version at: <a href="https://hal.science/hal-04142152" class="uri">https://hal.science/hal-04142152</a></p>
<p>In this paper, we investigate strategies to incorporate domain knowledge of atomic interaction processes into the design of graph neural networks. These take form of two overall strategies: an indirect but easier to implementation version of multi-task method; and a more direct but more successful method of learning modulation parameters for different edge relations of chemical bonds.</p>
<p>We show how these designs lead to concrete implementations in various neural network architectures, such as message-passing, or convolutional networks.</p>
<p>Finally, we evaluate these different implementations and demonstrate how prior domain knowledge can help neural networks to improve in accuracy, while providing some means of explainability in results, and being more robust to tasks adjacent to ones the neural network was trained on.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2023,
  author = {Morgan, Jay Paul},
  title = {Domain-Informed Graph Neural Networks: A Quantum Chemistry
    Case Study},
  date = {2023-06-27},
  url = {https:/morganwastaken.com/blog/2023-06-27-GNN/},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2023" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2023. <span>“Domain-Informed Graph Neural Networks: A
Quantum Chemistry Case Study.”</span> June 27, 2023. <a href="https://https:/morganwastaken.com/blog/2023-06-27-GNN/">https:/morganwastaken.com/blog/2023-06-27-GNN/</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2023-06-27-GNN/</guid>
  <pubDate>Mon, 26 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>MCH2023 - A retrospective</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2023-04-21-mch23/</link>
  <description><![CDATA[ 





<p>The <a href="https://mosaiics.astro.bas.bg/?page_id=165">2023 Machine Learning and Computer Vision in Heliophysics</a> conference, hosted in the luxurious Millennium hotel, Sofia, Bulgaria, has now concluded after 3 days of interesting and thought-provoking lectures.</p>
<p>Following this conference, I wanted to highlight some of the talks, as well as drawing and picking up common threads that were interwoven through all the presentations. From this, I hope to better understand what the current research is, more than one would gain for looking at each work in its isolation.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2023-04-21-mch23/images/20230419_085440.jpg" title="2023 Machine Learning and Computer Vision in Heliophyics conference introduction." class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>For a full list of the conference program, you can <a href="https://mosaiics.astro.bas.bg/wp-content/uploads/2023/04/MCH23_Workshop_Schedule_FULL.pdf">find it here</a>.</p>
<p>If you were at this conference and you think that I’ve missed something that should be covered in this discussion, please do get in touch and let me know!</p>
<section id="simple-models-are-useful-models" class="level1">
<h1>Simple models are useful models</h1>
<p>Much of the work showed thoughtful feature extraction, coupled with domain knowledge, and selection of traditional machine learning models can still produce reliable models upon which to make predictions. Take, for example, <a href="https://www.kuleuven.be/wieiswie/en/person/00132801">Hanne Baeke</a>’s talk where active regions are classified using the magnetic properties. A small number of features were selected by evaluating the usefulness and duplication of information present in all the features. After a sparse autoencoder was used to encode a slightly larger representation, that was classified using a <img src="https://latex.codecogs.com/png.latex?k"> -NN model in a supervised way, and <img src="https://latex.codecogs.com/png.latex?k"> -means in a unsupervised way.</p>
<p>But while, we have seen such use of traditional machine learning, Deep Neural Networks (DNNs) also make their appearance. I noticed a use of common models through applications. In particular, we saw many applications using either U-Net or YOLO.</p>
<p><a href="https://www.researchgate.net/profile/Andrea-Diercke">Andrea Diercke</a> created a labelled (the labels being bounding-boxes) dataset of filaments in the H-α wavelength. These labels were used to train a YOLO model to recognise the presence of filaments so other, more computationally expensive algorithms but potentially more accurate, could be used to create segmentation masks on smaller regions of the images.</p>
</section>
<section id="more-data-is-better-data" class="level1">
<h1>More data is better data</h1>
<p>Heliophyics is no exception in the world where more data is needed to adequately train ML models. Despite many satellites, telescopes, and other sensoring equipment constantly gathering data, a very large percentage of the data being recorded contains nothing interesting. For example, take <a href="https://www.linkedin.com/in/alin-razvan-paraschiv/">Alin Razvan Paraschiv</a>’s talk in which they would like to classify whether, based on a small number of features, a cosmic mass ejection (CME) will interact with the Earth (geoeffective). In this talk, 99.3% of all data is non-geoeffective. Class-imbalance is then a persistent problem. The disruptive events we want to detect and predict happen very rarely. In <a href="https://www.linkedin.com/in/vanessa-mercea-a13091105">Vanessa Mercea</a>’s talk on the detection of sunquakes, these type of events only happen around 2 times per year. Given then length of time since they’ve been discovered, we haven’t observed a whole lot of them.</p>
<p>To combat the issue of small samples of positive data, the <a href="https://www.jair.org/index.php/jair/article/view/10302">Synthetic Minority Oversampling Technique (SMOTE)</a> algorithm was very often used to generate synthetic examples.</p>
<p>Other cases used a DNN to generate data. Take, for example, <a href="https://www.linkedin.com/in/francesco-pio-ramunno-a03a20158/?originalSubdomain=it">Francesco Pio Ramunno</a> demonstrating a very interesting method of generating solar disk images that contain desired solar features using a Diffusion Probabilistic Model (DDPM). Others like <a href="https://www.linkedin.com/in/juan-esteban-agudelo-ortiz-5a34741b5?originalSubdomain=co">Juan Esteban Agudelo Ortiz</a> used a GAN architecture to generate stokes parameters.</p>
<p>As the events we’re interested in happen very infrequently, but we’re recording all of the time, we are essentially wasting our storage with useless data. <a href="https://homepages.dias.ie/murphp30/">Pearse Murphy</a> used a U-Net trained to segment type-II and type-III solar bursts so that data could be automatically binned and we reduce the storage costs by restricting the saving data closer to solar events.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2023-04-21-mch23/images/20230420_163823.jpg" title="Adeline Paiement presenting our working on removing cloud shadows from ground-based imaging." class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>Instead of generating data, DNNs were used to clean existing data. For example <a href="https://www.researchgate.net/profile/Jeremiah-Scully">Jeremiah Scully</a> ’s work in cleaning of radio frequency interference using GANs. Or, <a href="https://adelinepaiement.github.io/">Adeline Paiement</a> presenting <a href="https://github.com/jaypmorgan/cloud-removal">our work</a> on the cleaning of cloud contaminants from H-α and Ca-II imaging. We used a U-Net model in a C-GAN architecture to learn the cloud transmittance. The transmittance values could then be added to the solar disk, resulting in a cleaned image. You can find out <a href="https://github.com/jaypmorgan/presentations/tree/main/2023-04-19-Cloud-removal">poster at on my github</a>.</p>
</section>
<section id="other-talks" class="level1">
<h1>Other talks</h1>
<p>Not all of the talks fit into my classification here. But I wanted to highlight some other interesting talks that do not follow the trend placed above, though this in itself is not an exhaustive list.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2023-04-21-mch23/images/20230419_102413.jpg" title="[Manuel Luna](https://scholar.google.es/citations?user=fzGHAccAAAAJ&amp;hl=en) presenting his work on the characterisation on the oscillisation of filaments." class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>First we have <a href="https://scholar.google.es/citations?user=fzGHAccAAAAJ&amp;hl=en">Manuel Luna</a>’s work of detecting the oscillation of filament structures and its characterisation over a 6-month period. Secondlly, we have Benoit’s talk of creating a 3d-simulation of the sun by predicting the image of the solar disk from angles where there are no satellites. Other works include <a href="https://www.bu.edu/astronomy/profile/connor-obrien/">Connor O’Brien’s</a> lecture on the probabilisitc determination of solar wind propagation using an RNN model.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2023-04-21-mch23/images/20230419_173438.jpg" title="Benoit demonstrating an example of a 3d-simulation of the Sun's south pole." class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2023,
  author = {Morgan, Jay Paul},
  title = {MCH2023 - {A} Retrospective},
  date = {2023-04-21},
  url = {https://morganwastaken.com/blog/2023-04-21-mch23},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2023" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2023. <span>“MCH2023 - A Retrospective.”</span> April
21, 2023. <a href="https://morganwastaken.com/blog/2023-04-21-mch23">https://morganwastaken.com/blog/2023-04-21-mch23</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2023-04-21-mch23/</guid>
  <pubDate>Thu, 20 Apr 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Machine Learning and Computer Vision in Heliophysics</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2023-03-19-MCH23/</link>
  <description><![CDATA[ 





<p>We’ll be presenting a poster at the <a href="https://mosaiics.astro.bas.bg/?page_id=165">Machine Learning and Computer Vision in Heliophysics international workshop</a>, Sofia, Bulgaria.</p>
<p>The poster concerns the our work on improving the down-stream feature detection of solar features by removing the contamination of clouds from ground-based observations. We’ve started to open-source our <a href="https://github.com/jaypmorgan/cloud-removal">program code on github</a>, but please come and ask some questions if you’re at the conference!</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2023,
  author = {Morgan, Jay Paul},
  title = {Machine {Learning} and {Computer} {Vision} in {Heliophysics}},
  date = {2023-03-19},
  url = {https://morganwastaken.com/blog/2023-04-21-mch23},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2023" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2023. <span>“Machine Learning and Computer Vision in
Heliophysics.”</span> March 19, 2023. <a href="https://morganwastaken.com/blog/2023-04-21-mch23">https://morganwastaken.com/blog/2023-04-21-mch23</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2023-03-19-MCH23/</guid>
  <pubDate>Sun, 19 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Displaying remote images in Org-mode</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2023-03-18-Org-babel-remote-images/</link>
  <description><![CDATA[ 





<p>In one of my <a href="../2022-12-15-org-babel-tramp/">previous posts</a>, I explained how a remote python process can be setup in an org-mode documents. Therefore, allowing you to offload any large compute to a remote server.</p>
<p>However, in the previous post, I mentioned how I was unable to get images created as a result of a remote process (i.e.&nbsp;plotting with matplotlib) to display inline. My workaround was just to visit the remote file in a separate buffer using <code>C-c C-o</code>. But today, I chanced upon this stackoverflow <a href="https://stackoverflow.com/a/75086516">answer</a> that exactly solves my issue.</p>
<p>Unbeknownst to me, there is an variable that specifies how org-mode should handle remote paths. This variable, aptly named <code>org-display-remote-inline-images</code> (perhaps I should have searched in emacs’s variable list for some combination of these keywords), can be change from <code>skip</code> (which ignores any remote paths), to <code>download</code> which will display the image inline!</p>
<p>This is the documentation for this variable.</p>
<pre><code>org-display-remote-inline-images is a variable defined in ‘org.el’.

Its value is ‘skip’

How to display remote inline images.
Possible values of this option are:

skip        Don’t display remote images.
download    Always download and display remote images.
cache       Display remote images, and open them in separate buffers
            for caching.  Silently update the image buffer when a file
            change is detected.</code></pre>
<p>By setting this variable appropriately, working with a remote process in org-mode is just as it is with a local process – seamless.</p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2023,
  author = {Morgan, Jay Paul},
  title = {Displaying Remote Images in {Org-mode}},
  date = {2023-03-18},
  url = {https://morganwastaken.com/blog/2023-03-18-Org-babel-remote-images},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2023" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2023. <span>“Displaying Remote Images in
Org-Mode.”</span> March 18, 2023. <a href="https://morganwastaken.com/blog/2023-03-18-Org-babel-remote-images">https://morganwastaken.com/blog/2023-03-18-Org-babel-remote-images</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2023-03-18-Org-babel-remote-images/</guid>
  <pubDate>Sat, 18 Mar 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Using a remote Python process in Org-mode files</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2022-12-15-org-babel-tramp/</link>
  <description><![CDATA[ 





<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Sometimes the work we do requires a lot of horse-power – a lot of compute resource. Perhaps more than what we can do locally. In these cases, we might need to use a remote server.</p>
<p>In this blog post, I wanted to demonstrate how I’ve used a local org-mode file to execute computations via a remote python process.</p>
<p><a id="org44cc27d"></a></p>
</section>
<section id="setup" class="level1">
<h1>Setup</h1>
<p>First, we setup the location of remote server, and where the python process will be started. I do this within the top of the org-mode file so that all python code blocks will use this location by default. We set this up using the <code>#+PROPERTY:</code> argument:</p>
<pre><code>#+PROPERTY: header-args:python :dir /ssh:&lt;server&gt;:/path/to/dir</code></pre>
<p>We’ve added <code>:dir</code> that specifies the remote path using tramp. Whenever a python code block is executed normally with <code>C-c C-c</code>, it will connect to <code>&lt;server&gt;</code> and navigate to the <code>/path/to/dir</code> directory, start a python process, execute the source code and return the results.</p>
<p>We can verify that the code block is being executed on the remote server, and find out which python is being used by printing the hostname of the machine running the python process, and the path to the python executable:</p>
<pre><code>#+begin_src python :results output
import sys
import socket
print(socket.gethostname())
print(sys.executable)
#+end_src</code></pre>
<p><a id="orgdffb656"></a></p>
</section>
<section id="changing-the-python-interpreter" class="level1">
<h1>Changing the Python Interpreter</h1>
<p>By default, the python code blocks will be executed using the first “python” command found on the remote server’s path. Often, when working with Python, we have virtual environments.</p>
<p>The best (hacky) solution I’ve got to use the correct python environment is to manually change the <code>org-babel-python-command</code> to the path of the virtual environment to use:</p>
<pre><code>#+begin_src emacs-lisp
(setq org-babel-python-command "venv/bin/python")
#+end_src</code></pre>
<p>We can then confirm that the correct virtual environment is being used by printing the path to the executable again.</p>
<pre><code>#+begin_src python :results output
import socket
print(sys.executable)
#+end_src</code></pre>
<p><a id="org2a8826a"></a></p>
</section>
<section id="plotting" class="level1">
<h1>Plotting</h1>
<p>Alas there is still a pain point: plotting. When we execute a code block and specify that it returns a file (the path to the newly created plot), it will return a path on the local machine. Of course, this doesn’t exist as it was executed on the remote server. Take for example:</p>
<pre><code>#+begin_src python :results file
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0, 10)
y = np.random.randn(*x.shape) + x
plt.plot(x, y, 'r--')
plt.savefig("/tmp/test.png")
"/tmp/test.png"
#+end_src

#+RESULTS:
file:/tmp/testplot.png</code></pre>
<p>This will not work. Instead, a workaround I’ve created is creating a named code block to save and return the remote path:</p>
<pre><code>#+name: savefig
#+begin_src python :session testing :var filename="/tmp/plot.png"
f"""
plt.savefig('{filename}')
plt.close()
'/ssh:&lt;server&gt;:{filename}'
"""
#+end_src

#+RESULTS: savefig

: plt.savefig('/tmp/plot.png')
: plt.close()
: '/ssh:&lt;server&gt;:/tmp/plot.png'</code></pre>
<p>Then when we want to create a plot:</p>
<pre><code>#+begin_src python :results file :noweb strip-export
import matplotlib.pyplot as plt
import numpy as np
x = np.arange(0, 10)
y = np.random.randn(*x.shape) + x
plt.plot(x, y, 'r--')
&lt;&lt;savefig(filename="/tmp/testplot.png")&gt;&gt;
#+end_src

#+RESULTS:
file:/ssh:&lt;server&gt;:/tmp/testplot.png]]</code></pre>
<p>We won’t be able to see the image within the notebook itself, but we can use <code>C-c C-o</code> to open the file into it’s own buffer, which is the best solution I’ve come up with for the moment.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2022,
  author = {Morgan, Jay Paul},
  title = {Using a Remote {Python} Process in {Org-mode} Files},
  date = {2022-12-15},
  url = {https://morganwastaken.com/blog/2022-12-15-org-babel-tramp},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2022" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2022. <span>“Using a Remote Python Process in Org-Mode
Files.”</span> December 15, 2022. <a href="https://morganwastaken.com/blog/2022-12-15-org-babel-tramp">https://morganwastaken.com/blog/2022-12-15-org-babel-tramp</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2022-12-15-org-babel-tramp/</guid>
  <pubDate>Thu, 15 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>XTAI 2022 - Adaptive Neighbourhoods for the Discovery of Adversarial Examples</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2022-10-12-adaptive/</link>
  <description><![CDATA[ 





<p>Talk prepared for the AISB Workshop on Explainability and Transparency in AI, <a href="http://va7.myqnapcloud.com/WordPress/xtai-2022/">XTAI 2022</a>.</p>
<p><strong>Presentation Abstract</strong></p>
<p>Machine Learning, in particular Deep Learning, has most recently provided the state-of-the-art results for many tasks such as object recognition, text-to-speech processing, and credit-card fraud detection. In many cases, Deep Learning has even out-performed human performance on these very same tasks. Despite this advance in performance, however, the existence of so-called adversarial examples is well known within the community. These adversarial examples are the metaphorical ‘blind-spot’ of Deep Learning models, where very small (often human-imperceptible) changes to model’s input can result catastrophic miss-classifications. These adversarial examples then pose a great safety risk, especially in systems where safety is critical such as fully-automotive vehicles.</p>
<p>To defend against and attempt to eradicate the existence of adversarial examples in Deep Learning models, principle works have sought to search for their existence within fixed-sized regions around training points, and use the found adversarial examples as a criterion for learning. These works have demonstrated how the robustness of Deep Learning models against adversarial examples improves through these training regimes.</p>
<p>Our work means to compliment and improve on these existing approaches by adapting the size of the searchable regions around training points, based upon the complexity of the problem and data sampling density. The result is each training point has an adapted region around it to which adversarial examples can be searched for and found.</p>
<p>We demonstrate how, through the development of uniquely-adaptive searchable regions, existing methods can help to further improve the robustness of Deep Learning models, and also make the existing methods applicable to non-image related tasks by providing an upper bound for discovering adversarial examples.</p>
<p>In this presentation, we will explore how adversarial examples can be determined through the use of existing approaches. Further to these approaches, how our method allows us to generate unique and adapted region sizes for all training points in a dataset.</p>
<p><strong>Presentation Slides</strong></p>
<p><a href="https://github.com/jaypmorgan/presentations/blob/main/2022-10-13-Adaptive%20Neighbourhoods/presentation.pdf">Slides</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2022,
  author = {Morgan, Jay Paul},
  title = {XTAI 2022 - {Adaptive} {Neighbourhoods} for the {Discovery}
    of {Adversarial} {Examples}},
  date = {2022-10-12},
  url = {https://morganwastaken.com/blog/2022-10-12-adaptive},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2022" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2022. <span>“XTAI 2022 - Adaptive Neighbourhoods for
the Discovery of Adversarial Examples.”</span> October 12, 2022. <a href="https://morganwastaken.com/blog/2022-10-12-adaptive">https://morganwastaken.com/blog/2022-10-12-adaptive</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2022-10-12-adaptive/</guid>
  <pubDate>Tue, 11 Oct 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>British Colloquium for Theoretical Computer Science (BCTCS) 2021</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2021-03-29-bctcs/</link>
  <description><![CDATA[ 





<p><strong>Presentation Abstract</strong></p>
<p>Machine Learning (ML) has had a remarkable impact on society. Everything from the phones in our pockets, to the cars that we drive, are being increasingly outfitted with this progressively sophisticated suite of algorithms. But while many of the most basic and fundamental algorithms from ML can be formally verified and tested for safety without much trouble, the same may not be said for Deep Learning (DL) – a prominent forerunner in the state-of-the-art for ML research. These DL models, while performing simple matrix-to-matrix operations at a micro-level, have evolved in scale far past what is tractable for current formal verification methods – all in the pursuit of improving accuracy and performance. This issue of tractability is unsettling considering that the existence of adversarial examples is well known in the ML community. These adversarial examples occur when very small changes to the input space result in a large change in the output space and cause a miss-classification made by the DL model. In the context of self-driving vehicles, small defects and visual artifacts in the sensor input of the DL model, could lead the vehicle to wrongly conclude a stop sign indicates to continue driving where it should have stopped. While the manufacturers will need to put safe-guards in place to prevent this from happening, we should formally prove the (non)-existence of these adversarial examples in the DL model itself. In this presentation, I present the foundational knowledge for understanding adversarial examples, how we can use the input space to dictate the search space for the existence of these examples, and demonstrate their presence with the use of SAT-solving. This work, as a free and open-source project, provides a framework for ML practitioners to verify their own architectures.</p>
<p><strong>Presentation Slides</strong></p>
<p><a href="./bctcs_presentation/presentation.html">Slides</a></p>



<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2021,
  author = {Morgan, Jay Paul},
  title = {British {Colloquium} for {Theoretical} {Computer} {Science}
    {(BCTCS)} 2021},
  date = {2021-03-29},
  url = {https://morganwastaken.com/blog/2021-03-29-bctcs},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2021" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2021. <span>“British Colloquium for Theoretical
Computer Science (BCTCS) 2021.”</span> March 29, 2021. <a href="https://morganwastaken.com/blog/2021-03-29-bctcs">https://morganwastaken.com/blog/2021-03-29-bctcs</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2021-03-29-bctcs/</guid>
  <pubDate>Sun, 28 Mar 2021 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Makefile: Towards Reproducible Research-based Programming</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2020-03-05-makefile/</link>
  <description><![CDATA[ 





<p>I’ve been experimenting with <code>make</code> to deliver research projects. It has been to be a great way to alleviate some particular pain points that arise from these types of projects. Sufficed to say, the <code>make</code> tool has been an excellent addition to my workflow, one that I shall continue to use and experiment with.</p>
<p>In this post, I would like to introduce you to <code>make</code> and how it can be used to help make research more reproducible and, ultimately, easier to manage complicated experiments. We shall first look at the problems that normally appear in research programming to give adequate background reason as to why <code>make</code> may be useful in this area. Then, after these problems have been understood, we will look at the basics of <code>make</code> and the construction of makefiles to both quickly automate our research while making it more reproducible for others.</p>
<p><u>DISCLAIMER:</u> I am by no means an expert in writing makefiles. And if you are, you may think some of the examples are not the optimal way to encode makefile rules. Indeed, many of the makefile examples will be somewhat more verbose than what you would want to use in production-grade products. However, for the purpose of this discussion, optimal and efficient makefiles are not conducive for learning about the basics. It may be better to create simple rules that work first, then once you’re comfortable, making the makefile more complicated yet concise in the name of efficiency.</p>
<section id="problems-that-arise-during-the-course-of-research" class="level1">
<h1>Problems that arise during the course of research</h1>
<p>When conducting a research project, though the objective or hypothesis will be clearly defined, the steps involved to answer research questions are usually not. In essence, during the course of the project, the code-base, and even the data itself, will undergo several iterations of changes and experimentation with different methodologies. The consequence being that you’ll rarely run through the project from start to finish, let alone the project structure before hand.</p>
<p>Change is not inherently a problem, indeed, it is a necessity for research and experimentation. But, the issue lies in change that is not properly managed.</p>
<p>When the data changes, any existing experiments will have to be re-run, or else, the results reported on the data should be considered <em>stale</em>. Changes to data occur frequently. Though raw data will never be modified in place, part of the research will involve cleaning, transforming, and potentially summarising the data before any method is applied to it. In principle, it would be ideal for the data to be completely clean and ready before any methods are used. However, problems do occur, and you may find yourself going back to the original data source and further accounting for some edge case that your current data cleaning does not catch. If you have already run experiments on the previous iteration of the ‘cleaned’ data, they will need to be re-run. Moreover, any other sources that directly depends on this data, such as summarised statistics, will also have to be recalculated. There is a significant overhead in remembering what needs to be updated at the moment of any change to the underlying data.</p>
<p>CHANGE also has an effect on your code-base. Whether it is because of parameter tuning, bug fixes, or performance improvements, any change to the code-base could have both visible and invisible effects to the performance of the methodologies you are testing. To account for change (such as bug fixing or refactoring) in your program, it is desirable to construct unit tests. But while unit tests are a good and common practice, they may miss use cases and silent errors that come from integrating multiple scripts that you write throughout the project. Changes to your code base should be recorded, tested, and if possible, experiments should be re-done to ensure that the results you are reporting are the true results of the program.</p>
<p>When these multiple factors of change are combined, it can be very difficult for others to reproduce your results. <code>make</code> can help with some of these issues by keeping track of what files have been changed, in addition to understanding the dependencies between files. We may use <code>make</code> to ‘compile’ our research project, allow others to easily reproduce our results, as well as automate our workflow.</p>
</section>
<section id="what-is-make-and-makefile" class="level1">
<h1>What is Make and Makefile?</h1>
<p><a href="https://www.gnu.org/software/make/manual/html_node/index.html#Top">Make</a> is a application often used to compile other larger and complex applications. By keeping track of dependencies, in addition to working on what needs to be recompiled, it can make compilation of software easy.</p>
<p>The input to <code>make</code> is a Makefile. A Makefile simply tells <code>make</code> what to do. In this file, we have a list of targets, which when provided to <code>make</code> as an argument, will execute the rules for this target, in addition to executing rules that this current target depends on.</p>
<p>Typically, the makefile contains the following:</p>
<pre><code>target: dependancies # optional
    rule to make target</code></pre>
<p>Our target is something we wish to create, and may depend on a number of different files. To make the target, we apply one or more rules such as executing a python program.</p>
<p>We shall discuss how to use <code>make</code> and indeed write makefiles in order to make our research project for us.</p>
</section>
<section id="using-makefile-for-research-programming" class="level1">
<h1>Using Makefile for research programming</h1>
<p>Using make may then change the way we view our project, from a process where developing the code and algorithms are objective, to one where the result our output of said algorithm is the objective. Indeed, we may view our research as the application, and both our code and data as something that needs to be compiled in order to produce our output, the report on the research.</p>
<section id="a-simple-example" class="level2">
<h2 class="anchored" data-anchor-id="a-simple-example">A simple example</h2>
<p>Let us begin with a very basic example. Our project is going to be very simple: we have a simple data source, a CSV file. With this data, we need to measure the mean and standard deviation. Not a very exciting example, and it certainly won’t win you a noble prize, but it will highlight how we might create our simple makefile to automate this process.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2020-03-05-makefile/images/makefile_process_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>In this example, we have two starting files: (1) our data source – <code>data.csv</code>; and (2) our program with which we can import the data source and compute the mean and standard deviation, aptly named <code>stats.py</code>. This program needs no command line arguments, but when called it simply looks for <code>data.csv</code>, computes the statistics and writes a new file <code>output.csv</code>.</p>
<p>In the same directory, we shall create a new file called <code>Makefile</code>. The contents of our makefile are going look like this:</p>
<pre><code>output.csv: data.csv stats.py
    python stats.py </code></pre>
<p>This simple example includes the majority of what you will be doing in makefiles. We have a <strong>target</strong> in this case <code>output.csv</code>. We can tell its a target because it is followed by a colon ‘:’. This is the command we will pass to <code>make</code> when we wish to execute our make file.</p>
<p>Next, we specify our (optional) <strong>dependencies</strong>. Our target depends on two files: <code>data.csv</code> and <code>stats.py</code>. This is simple a space delimited list of files after our target. Simply stated, we are telling <code>make</code> that in order to create our CSV file, both <code>data.csv</code> and <code>stats.py</code> must exist. But there’s more: <code>make</code> is smart and by listing the dependencies, we are telling <code>make</code> that if either our data or our program changes then <code>output.csv</code> will need to be re-made. If they haven’t change and <code>output.csv</code> already exists, make will tell us that nothing more needs to be done (it doesn’t bother executing the program twice).</p>
<p>The next line tells make what to do in order to create our target, our <strong>rule</strong>. In this case we call <code>python stats.py</code>. Like python, makefiles are indentation delimited. But unlike python where this indentation can be done either with tabs or spaces (but definitely not both), <strong>makefiles are always indented with tabs</strong>.</p>
<p>To run this makefile, we type <code>make output.csv</code> into the command line. If everything is setup correctly, make will run <code>python stats.py</code> and our <code>output.csv</code> will be created.</p>
</section>
<section id="a-more-complicated-example" class="level2">
<h2 class="anchored" data-anchor-id="a-more-complicated-example">A more complicated example</h2>
<p>Suppose we have two algorithms and we wish to generate some comparative metrics. Like the previous example, we have a single data source called <code>data.csv</code>, but this time, we have two python programs: one for each algorithm. Each of these programs will create its own CSV file output. The process flow will look like this:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2020-03-05-makefile/images/makefile_process_2.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>In this case, we wish to execute both python programs to create both outputs.</p>
<pre><code>output_1.csv: data.csv algorithm_1.py 
    python algorithm_1.py

output_2.csv: data.csv algorithm_2.py
    python algorithm_2.py </code></pre>
<p>This time we have created two targets, one for each of our output csv files. Each target has their own dependencies and the rule to create the different outputs.</p>
<p>In order to actually create the CSV files, we will type:</p>
<pre><code>make output_1.csv
make output_2.csv</code></pre>
<p>into the command line. <code>make</code> is of course happy to take these two requests, but there is more onerous on us to make sure to execute both commands. While this is okay for these two CSVs, it will become more laborious when we have more.</p>
<p>To overcome this issue, we can use a <code>PHONY</code> target. A phony target is one that won’t exist but serves as a alias to provide <code>make</code> with a command we can type. In our previous example, both <code>output_1.csv</code> and <code>output_2.csv</code> were files that will exist after make has executed the two rules. With a phony target, however, make won’t bother to look for the target’s existence.</p>
<p>We can create a phony target with:</p>
<pre><code>.PHONY: output
output: output_1.csv output_2.csv</code></pre>
<p>Our phony target, named <code>output</code>, depends on both our CSV files. Now, we can get <code>make</code> to create both of these output files with a single command: <code>make output</code>.</p>
</section>
<section id="multistage-processing" class="level2">
<h2 class="anchored" data-anchor-id="multistage-processing">Multistage processing</h2>
<p>Our previous examples have consisted of only one processing step, we take our input data, and produce an output. In these cases, keeping track of what is up-to-date and what still needs to be executed is easy enough. But when we introduce processing pipelines where the output of one program feeds into another, things can get a little more complicated.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2020-03-05-makefile/images/makefile_process_3.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>We have introduced a significantly more complicated process. We use a c++ program <code>squares.cpp</code> to take all of the data in the CSV, square it, and save the intermediate version as <code>squared_data.csv</code>. Processes such as this may occur when the dataset is large enough that we apply computations in batches or jobs via high-performance computing. In these cases, it is better to keep the original data source and preserve its mutability.</p>
<p>With this squared data, our third algorithm – <code>algorithm_3.py</code> – is executed to produce output<sub>3.csv</sub>. To automate this process, we will add the following rule to our makefile:</p>
<pre><code>output_1.csv: data.csv algorithm_1.py
    python algorithm_1.py

output_2.csv: data.csv algorithm_2.py
    python algorithm_2.py

output_3.csv: data.csv squares.cpp
    g++ -i squares.cpp squares.o
    ./squares.o 
    python algorithm_3.py

.PHONY: outputs
outputs: output_1.csv output_2.csv output_3.csv</code></pre>
<p>and all outputs can be made with <code>make outputs</code>.</p>
<p>Both algorithm 1 and 2 are the same as the previous examples, but algorithm 3 has more computation steps. First, we must ensure that our c++ code is compiled, then we must produce the <code>squares_data.csv</code> (done by <code>./squares</code> in this example), and then finally run <code>python algorithm_3.py</code> to produce the results.</p>
<p>This is great, but what if algorithm 2 depended on both <code>data.csv</code> and <code>squared_data.csv</code>?</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2020-03-05-makefile/images/makefile_process_4.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>We could change our <code>output_2.csv</code> target to something like this:</p>
<pre><code>output_2.csv: data.csv squared_data.csv algorithm_2.py 
    g++ -i squares.cpp squares.o 
    ./squares.o 
    python algorithm_2.py </code></pre>
<p>But we may notice that the compilation of the c++ program occurs twice. So, instead, lets make the executable a target within its own right:</p>
<pre><code>squares.o: squares.cpp 
    g++ -i squares.cpp squares.o </code></pre>
<p>In addition, we can also create a target for the <code>squared_data.csv</code> as we only with to create it once.</p>
<pre><code>squared_data.csv: squares.o 
    ./squares.o</code></pre>
<p>and we’ll amend our previous versions of targets <code>output_2.csv</code> and <code>output_3.csv</code> to depend on this executable already existing and being up-to-date.</p>
<pre><code>output_2.csv: data.csv algorithm_2.py squared_data.csv
    python algorithm_2.py

output_3.csv: data.csv algorithm_3.py squared_data.csv
    python algorithm_3.py </code></pre>
<p>This way, both the compilation and creation of <code>squared_data.csv</code> happens once.</p>
<p>Our final makefile shall look like the following:</p>
<pre><code>output_1.csv: data.csv algorithm_1.py
    python algorithm_1.py

output_2.csv: data.csv algorithm_2.py squared_data.csv
    python algorithm_2.py

output_3.csv: data.csv algorithm_3.py squared_data.csv 
    python algorithm_3.py

squares.o: squares.cpp 
    g++ -i squares.cpp squares.o

squared_data.csv: squares.o 
    ./squares.o

.PHONY: outputs 
outputs: output_1.csv output_2.csv output_3.csv</code></pre>
<p>and all output CSV files can still be created with one single command: <code>make outputs</code>. If we wish to just execute one pathway or algorithm, we can just specify that particular target. For example, if we just wish to run algorithm 1, we can run <code>make output_1.csv</code>.</p>
</section>
<section id="creating-a-summarised-report" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-summarised-report">Creating a summarised report</h2>
<p>We can go further and improve our process of research. Now that we have our outputs from each of the algorithm, we may summarise them and produce a final CSV file to present in a report.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2020-03-05-makefile/images/makefile_process_5.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>Our <code>summarise.py</code> takes all the results from each algorithm, provides some summary statistics, and outputs a single CSV file that is suitable for a report.</p>
<p>If we use latex, and the PGFplotstable package, we can also automate the process of getting these results into our report.</p>
<pre><code>\documentclass{article}

\usepackage{pgfplotstable} % must use this package

\title{Report}

\begin{document}

% import our table from the CSV file
\begin{table}
\centering
\caption{My table}
\label{tab:my_table}
\pgfplotstableread[col sep=comma]{final_results.csv}\data
\pgfplotstypeset[
    % column options
]{\data}
\end{table}

\end{document}</code></pre>
<p>Now, every time our results file changes, either because we added more algorithms, or we have modified the code or data, our report will always be up to date.</p>
<p><a href="http://pgfplots.sourceforge.net/pgfplotstable.pdf">PGFPlotstable</a> is a very useful package for importing, formatting, and even doing basic evaluations of data. Moreover, if you combine this package with the regular PGFplots, you data tables and plots can be automatically kept in sync with one another.</p>
<p>We can go further and add the compilation of this latex document to our makefile:</p>
<pre><code>.PHONY: report
report: final_results.csv report.tex
    pdflatex report.tex</code></pre>
<p>And compile it using <code>make report</code>. These is an added benefit here that we may also add the recompilation rules for if our document contains a bibliography:</p>
<pre><code>.PHONY: report
report: final_results.csv report.tex references.bib
    pdflatex report.tex
    bibtex report.aux
    pdflatex report.tex
    pdflatex report.tex</code></pre>
</section>
</section>
<section id="variables-and-writing-less-code" class="level1">
<h1>Variables and writing less code</h1>
<p>Our final makefile has a lot of repeated content:</p>
<pre><code>output_1.csv: data.csv algorithm_1.py
    python algorithm_1.py

output_2.csv: data.csv algorithm_2.py squared_data.csv
    python algorithm_2.py

output_3.csv: data.csv algorithm_3.py squared_data.csv 
    python algorithm_3.py

squares.o: squares.cpp 
    g++ -i squares.cpp squares.o

squared_data.csv: squares.o 
    ./squares.o

.PHONY: outputs 
outputs: output_1.csv output_2.csv output_3.csv

final_results.csv: output_1.csv output_2.csv output_3.csv
    python summarise.py

.PHONY: report
report: report.tex final_results.csv references.bib
    pdflatex report.tex
    bibtex report.aux
    pdflatex report.tex
    pdflatex report.tex</code></pre>
<p>and if we wish to, for example, change the name of the original input data source from <code>data.csv</code> to <code>input_data.csv</code>, we must in fact change this name in multiple places in the makefile, ensuring that all of the dependencies are up to date.</p>
<p>In a makefile, using <a href="https://ftp.gnu.org/old-gnu/Manuals/make-3.79.1/html_chapter/make_6.html">variables</a> may overcome this limitation. Let’s begin by first defining a number of variables to remove the duplicated content.</p>
<pre><code># our new variables
DATA = data.csv
SQDR_DATA = squared_data.csv
PYTHON_EXE = python
RESULTS = output_1.csv output_2.csv output_3.csv

output_1.csv: $(DATA) algorithm_1.py
    $(PYTHON_EXE) algorithm_1.py

output_2.csv: $(DATA) algorithm_2.py $(SQRD_DATA)
    $(PYTHON_EXE) algorithm_2.py

output_3.csv: $(DATA) algorithm_3.py $(SQRD_DATA) 
    $(PYTHON_EXE) algorithm_3.py

squares.o: squares.cpp 
    g++ -i squares.cpp squares.o

squared_data.csv: squares.o 
    ./squares.o

.PHONY: outputs 
outputs: $(RESULTS)

final_results.csv: $(RESULTS)
    $(PYTHON_EXE) summarise.py

.PHONY: report
report: report.tex final_results.csv references.bib
    pdflatex report.tex
    bibtex report.aux
    pdflatex report.tex
    pdflatex report.tex</code></pre>
<p>Variables are declared and used much like in bash, where the <code>=</code> is used to assign a value to the variable name and <code>$(...)</code> uses the value of the variable.</p>
<p>If we now wish to change the name of <code>data.csv</code> we only need to change it in one place of the makefile. We have also replaced the name of the python executable so if we decide, for example, should we wish to use a ‘virtualenv’ version of python, we can quickly change this too.</p>
<p>In addition to regular variables, make includes a number of <em>magic</em> or automatic variables to further reduce the amount of duplication in our makefile. Two of the automatic variables you will find yourself frequently using is <code>$@</code> and <code>$&lt;</code>. The first, <code>$@</code> is an automatic variable for the <em>target</em>, and <code>$&lt;</code> is the <em>first dependency</em>. We can use both of these in the following way:</p>
<pre><code>squares.o: squares.cpp
    g++ -i $&lt; $@

.PHONY: report
report: report.tex final_results.csv references.bib
    pdflatex $&lt;
    bibtex $@.aux
    pdflatex $&lt;
    pdflatex $&lt;</code></pre>
<p>In the example above, we compiled our c++ program using <code>g++</code>, specifying the input file with the <code>$&lt;</code> variable that references the first dependency for our target, which in this case is <code>squares.cpp</code>. We’ve told <code>g++</code> that we wish for the output executable to be called <code>squares.o</code> using our target variable, <code>$@</code>.</p>
<p>We have used a similar methodology for compiling our latex file.</p>
<p><code>make</code> includes a number of automatic variables to help reduce the size of your makefile. You can find the list and their usage here: <a href="https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html" class="uri">https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html</a></p>
<p>Our final makefile is:</p>
<pre><code># our new variables
DATA = data.csv
SQDR_DATA = squared_data.csv
PYTHON_EXE = python
RESULTS = output_1.csv output_2.csv output_3.csv

output_1.csv: $(DATA) algorithm_1.py
    $(PYTHON_EXE) algorithm_1.py

output_2.csv: $(DATA) algorithm_2.py $(SQRD_DATA)
    $(PYTHON_EXE) algorithm_2.py

output_3.csv: $(DATA) algorithm_3.py $(SQRD_DATA) 
    $(PYTHON_EXE) algorithm_3.py

squares.o: squares.cpp 
    g++ -i squares.cpp squares.o

squares.o: squares.cpp
    g++ -i $&lt; $@

.PHONY: outputs 
outputs: $(RESULTS)

final_results.csv: $(RESULTS)
    $(PYTHON_EXE) summarise.py

.PHONY: report
report: report.tex final_results.csv references.bib
    pdflatex $&lt;
    bibtex $@.aux
    pdflatex $&lt;
    pdflatex $&lt;</code></pre>
<p>which automates our research process:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2020-03-05-makefile/images/makefile_process_6.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>Even if we move or send our files to a different computer, all we have to do to run our project from start to finish is <code>make report</code>.</p>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p><code>make</code> can be an excellent addition to any research project. It tracks dependencies between files, only re-executes what is considered <em>stale</em> and all the while providing the developer with a simple interface to execute multiple commands with just a single target.</p>
<p>If you use <code>make</code> and create a simple but yet powerful makefile, you can automate many of the laborious tasks that come with organising research-based projects.</p>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2020,
  author = {Morgan, Jay Paul},
  title = {Makefile: {Towards} {Reproducible} {Research-based}
    {Programming}},
  date = {2020-03-05},
  url = {https://morganwastaken.com/blog/2020-03-05-makefile},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2020" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2020. <span>“Makefile: Towards Reproducible
Research-Based Programming.”</span> March 5, 2020. <a href="https://morganwastaken.com/blog/2020-03-05-makefile">https://morganwastaken.com/blog/2020-03-05-makefile</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2020-03-05-makefile/</guid>
  <pubDate>Thu, 05 Mar 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Fuzzy Logic Membership Functions</title>
  <dc:creator>Jay Paul Morgan</dc:creator>
  <link>https://morganwastaken.com/posts/2019-06-27-membership-functions/</link>
  <description><![CDATA[ 





<p>A membership function is a method of translating a crisp value <img src="https://latex.codecogs.com/png.latex?x%20%5Cin%0A%5Cmathbb%7BR%7D"> into a fuzzy set. In other words, we can find the membership grade (the amount of membership) for x with a value between 0 and 1. If the membership grade is only 0 or 1, then we are using classical sets.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AA%20=%20%5C%7B(x,%20%5Cmu_A(x))%20%7C%20x%20%5Cin%20X%5C%7D,%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?%5Cmu_A(x)"> is the Membership function (MF) for the fuzzy set <img src="https://latex.codecogs.com/png.latex?A">.</p>
<p>To make these MFs, we will use the <a href="https://gitlab.com/jaymorgan/fuzzytorch">FuzzyTorch</a> library.</p>
<pre><code>import os; os.chdir("../")

from functools import partial

import torch
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import seaborn as sns

# Our Membership Functions import
from src.functional.membership import *

x = torch.linspace(0, 100, 100).view(-1, 1)

def draw_function(func):
    sns.lineplot(x.flatten().numpy(), func.flatten())
    plt.xlabel("$$x_i$$")
    plt.ylabel("Membership Value")
    plt.grid()</code></pre>
<p><a id="org54b3bc0"></a></p>
<section id="triangluar-function" class="level1">
<h1>Triangluar Function</h1>
<p>A triangular MF is created using three parameters <img src="https://latex.codecogs.com/png.latex?%5C%7Ba,%20b,%20c%5C%7D,%20a%20%3C%20b%20%3C%20c">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7Btriangle%7D(x%20;%20a,%20b,%20c)=%5Cleft%5C%7B%5Cbegin%7Barray%7D%7Bcc%7D%7B0,%7D%20&amp;%20%7Bx%20%5Cleq%20a%7D%20%5C%5C%20%7B%5Cfrac%7Bx-a%7D%7Bb-a%7D,%7D%20&amp;%20%7Ba%20%5Cleq%20x%20%5Cleq%20b%7D%20%5C%5C%20%7B%5Cfrac%7Bc-x%7D%7Bc-b%7D,%7D%20&amp;%20%7Bb%20%5Cleq%20x%20%5Cleq%20c%7D%20%5C%5C%20%7B0,%7D%20&amp;%20%7Bc%20%5Cleq%20x%7D%5Cend%7Barray%7D%5Cright.%0A"></p>
<pre><code>help(triangle)

Help on function triangle in module src.functional.membership:

triangle(x, a, b, c)
    Triangular Membership Function

    :param x: input value
    :param a: start point where membership is 0
    :param b: center point where membership is 1
    :param c: end point where membership is 0

tri = partial(triangle, a=20, b=60, c=80)

draw_function(tri(x))

plt.text(22, tri(20), "a")
plt.text(62, tri(60), "b")
plt.text(82, tri(80), "c")</code></pre>
<p>Text(82, tensor([0.]), ‘c’)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_6_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>Trapezoid Membership Function</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7Btrapezoid%7D(x%20;%20a,%20b,%20c,%20d)=%5Cleft%5C%7B%5Cbegin%7Barray%7D%7Bll%7D%7B0,%7D%20&amp;%20%7Bx%20%5Cleq%20a%7D%20%5C%5C%20%7B%5Cfrac%7Bx-a%7D%7Bb-a%7D,%7D%20&amp;%20%7Ba%20%5Cleq%20x%20%5Cleq%20b%7D%20%5C%5C%20%7B%5Cfrac%7Bd-x%7D%7Bd-c%7D,%7D%20&amp;%20%7Bc%20%5Cleq%20x%20%5Cleq%20d%7D%20%5C%5C%20%7B0,%7D%20&amp;%20%7Bd%20%5Cleq%20x%7D%5Cend%7Barray%7D%5Cright.%0A"></p>
<pre><code>help(trapezoid)

Help on function trapezoid in module src.functional.membership:

trapezoid(x, a, b, c, d)
    Trapezoidal Membership Function

    :param x: input value
    :param a: bottom left point where membership is 0
    :param b: top left point where membership is 1
    :param c: top right point where membership is 1
    :param d: bottom right point where membership is 0

trap = partial(trapezoid, a=10, b=20, c=60, d=95)

draw_function(trap(x))

plt.text(11, trap(10), "a")
plt.text(21, trap(20), "b")
plt.text(61, trap(60), "c")
plt.text(96, trap(95), "d")</code></pre>
<p>Text(96, tensor([0.]), ‘d’)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_9_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p><a id="org9e00184"></a></p>
</section>
<section id="gaussian-membership-function" class="level1">
<h1>Gaussian Membership Function</h1>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7Bgaussian%7D(x%20;%20c,%20%5Csigma)=e%5E%7B-%5Cfrac%7B1%7D%7B2%7D%5Cleft(%5Cfrac%7Bx-c%7D%7B%5Csigma%7D%5Cright)%5E%7B2%7D%7D%0A"></p>
<pre><code>help(gaussian)

Help on function gaussian in module src.functional.membership:

gaussian(x, a, b)
    Gaussian Membership Function

    :param x: input value
    :param a: The mean of the Gaussian Distribution
    :param b: The standard deviation of the Distribution

    Usage: gaussian(40, a=50, b=20)
           gaussian(torch.Tensor([[20],[30]]), a=50, b=20)

gaus = partial(gaussian, a=50, b=20)

draw_function(gaus(x))

plt.text(50-5, gaus(50)-0.1, "Mean")
plt.text(50+22, gaus(50+20), "Standard Deviation")</code></pre>
<p>Text(72, tensor([0.6065]), ‘Standard Deviation’)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_12_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>General Bell Curve Membership Function</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7Bbell%7D(x%20;%20a,%20b,%20c)=%5Cfrac%7B1%7D%7B1+%5Cleft%7C%5Cfrac%7Bx-c%7D%7Ba%7D%5Cright%7C%5E%7B2%20b%7D%7D%0A"></p>
<pre><code>help(bell)

Help on function bell in module src.functional.membership:

bell(x, a, b, c)
    General Bell Curve Membership Function

    :param x: input value
    :param a: width of bell curve.
    :param b: slop of the curve, lower values = curvier
    :param c: centre of the curve.

bellf = partial(bell, a=20, b=4, c=50)

draw_function(bellf(x))</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_15_0.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p><a id="org09803c6"></a></p>
</section>
<section id="sigmoidal-membership-function" class="level1">
<h1>Sigmoidal Membership Function</h1>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7Bsigmoid%7D(x%20;%20a,%20c)=%5Cfrac%7B1%7D%7B1+%5Cexp%20%5B-a(x-c)%5D%7D%0A"></p>
<pre><code>help(sigmoid)

Help on function sigmoid in module src.functional.membership:

sigmoid(x, a, b)
    Sigmoidal Membership Function

    :param x: input value
    :param a: amount of curvature, higher values = unit step
    :param b: 0.5 centre posistion

sig = partial(sigmoid, a=1, b=50)

draw_function(sig(x))</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_18_0.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>Left-Right (LR) Membership Function</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7Blr%7D(x%20;%20c,%20%5Calpha,%20%5Cbeta)=%5Cleft%5C%7B%5Cbegin%7Barray%7D%7Bll%7D%7BF_%7BL%7D%7D%20&amp;%20%7B%5Cleft(%5Cfrac%7Bc-x%7D%7B%5Calpha%7D%5Cright),%20%5Cquad%20x%20%5Cleq%20c%7D%20%5C%5C%20%7BF_%7BR%7D%7D%20&amp;%20%7B%5Cleft(%5Cfrac%7Bx-c%7D%7B%5Cbeta%7D%5Cright),%20%5Cquad%20x%20%5Cgeq%20c%7D%5Cend%7Barray%7D%5Cright.%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?F_L(x)"> and <img src="https://latex.codecogs.com/png.latex?F_R(x)"> are monotonically decreasing functions. Let</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbegin%7Baligned%7D%20F_%7BL%7D(x)%20&amp;=%5Cmax%20%5Cleft(0,%20%5Csqrt%7B1-x%5E%7B2%7D%7D%5Cright)%20%5C%5C%20F_%7BR%7D(x)%20&amp;=e%5E%7B-%7Cx%7C%5E%7B3%7D%7D%20%5Cend%7Baligned%7D"></p>
<pre><code>help(lr)

Help on function lr in module src.functional.membership:

lr(x, a, b, c)
    Left-Right (LR) Membership Function

    :param x: input value
    :param a: centre point of change
    :param b: rate of decay after change
    :param c: length of decay

lr1 = partial(lr, a=65, b=60, c=10)
lr2 = partial(lr, a=25, b=10, c=40)

draw_function(lr1(x))
draw_function(lr2(x))

plt.grid()
plt.legend(["a = 65, b = 60, c = 10", "a = 25, b = 10, c = 40"])</code></pre>
<p>&lt;matplotlib.legend.Legend at 0x7f37d3458048&gt;</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_21_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p><a id="org1d5aefe"></a></p>
</section>
<section id="multi-dimensional-functions" class="level1">
<h1>Multi-Dimensional Functions</h1>
<p>The combination of different functions can be applied to many inputs. Here, we shall consider two variables <img src="https://latex.codecogs.com/png.latex?x,%20y"> to demonstrate how MFs can be used with AND, OR operations.</p>
<pre><code># Our two variables
x = torch.linspace(-5, 5, 50)
y = torch.linspace(-5, 5, 50)</code></pre>
<p>The single dimension function can be referred to as a <img src="https://latex.codecogs.com/png.latex?%5Ctextit%7Bbase%20set%7D">.</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Coperatorname%7BBase%20Set%7D%20=%20%5Cmu_A(x)%20=%20%5Coperatorname%7Bgaussian%7D(x;%20a,%20b)%0A"></p>
<pre><code>fig = plt.figure()

draw_function(gaussian(x, 0, 1.5))

plt.title("Base set of A")</code></pre>
<p>Text(0.5, 1.0, ‘Base set of A’)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_25_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>This can be turned into a cylindrical extension through:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%20%20%20%20c(A)%20=%20%5Cint_%7BX%20%5Ctimes%20Y%7D%20%5Cmu_A(X)%20/%20(x,%20y)%0A"></p>
<p>where c(A) is our cylindrical extension.</p>
<pre><code>fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")

xx, yy = np.meshgrid(x.numpy(), y.numpy())

ax.plot_surface(xx, 
                yy,
                gaussian(torch.Tensor(xx), 0., 1.5).numpy(),
                cmap="jet")

ax.set_xlabel("x input")
ax.set_ylabel("y input")
ax.set_zlabel("Membership Value")</code></pre>
<p>Text(0.5, 0, ‘Membership Value’)</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_27_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<p>To use AND and OR operations, we can use the min and max respectively of two MF functions for each input dimension. The logical `and` is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu_A(x)%20%5Cland%20%5Cmu_A(y)%20=%20max(%5Cmu_A(x),%20%5Cmu_A(y))%0A"></p>
<p>and the logical `or` is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Cmu_A(x)%20%5Clor%20%5Cmu_A(y)%20=%20min(%5Cmu_A(x),%20%5Cmu_A(y))%0A"></p>
<pre><code>fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")

xx, yy = np.meshgrid(x.numpy(), y.numpy())

andOp = torch.max(gaussian(torch.Tensor(xx), 0, 1.5), gaussian(torch.Tensor(yy), 0, 1.5))

ax.plot_surface(xx, yy, andOp.numpy(), cmap="jet")</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_29_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>
<pre><code>fig = plt.figure()
ax = fig.add_subplot(111, projection="3d")

orOp = torch.min(gaussian(torch.Tensor(xx), 0, 1.5), gaussian(torch.Tensor(yy), 0, 1.5))

ax.plot_surface(xx, yy, orOp.numpy(), cmap="jet")</code></pre>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://morganwastaken.com/posts/2019-06-27-membership-functions/images/output_30_1.png" class="img-fluid figure-img"></p>
<figcaption>img</figcaption>
</figure>
</div>


</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-citation"><h2 class="anchored quarto-appendix-heading">Citation</h2><div><div class="quarto-appendix-secondary-label">BibTeX citation:</div><pre class="sourceCode code-with-copy quarto-appendix-bibtex"><code class="sourceCode bibtex">@online{morgan2019,
  author = {Morgan, Jay Paul},
  title = {Fuzzy {Logic} {Membership} {Functions}},
  date = {2019-06-27},
  url = {https://morganwastaken.com/blog/2019-06-27-membership-functions},
  langid = {en}
}
</code></pre><div class="quarto-appendix-secondary-label">For attribution, please cite this work as:</div><div id="ref-morgan2019" class="csl-entry quarto-appendix-citeas">
Morgan, Jay Paul. 2019. <span>“Fuzzy Logic Membership Functions.”</span>
June 27, 2019. <a href="https://morganwastaken.com/blog/2019-06-27-membership-functions">https://morganwastaken.com/blog/2019-06-27-membership-functions</a>.
</div></div></section></div> ]]></description>
  <guid>https://morganwastaken.com/posts/2019-06-27-membership-functions/</guid>
  <pubDate>Wed, 26 Jun 2019 23:00:00 GMT</pubDate>
</item>
</channel>
</rss>
